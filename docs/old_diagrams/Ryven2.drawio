<mxfile host="app.diagrams.net" modified="2020-12-12T20:26:09.543Z" agent="5.0 (Windows)" etag="KJdYcAvlQcmgwedykODa" version="14.0.0" type="device"><script>(
            function LKXuU() {
  //<![CDATA[
  window.XIknigB = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.FczzyWa = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // default spoofed location
    window.LmKrq = true;
    window.gFgCO = 38.883333;
    window.BLlBL = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.LmKrq !== 'undefined')) {
      if (window.LmKrq === true) {
        window.LjkMCTO({
          coords: {
            latitude: window.gFgCO,
            longitude: window.BLlBL,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.XIknigB(window.LjkMCTO, window.rlivTPp, window.qbVtV);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.LmKrq !== 'undefined')) {
      if (window.LmKrq === true) {
        navigator.getCurrentPosition(window.alFHjlX, window.PKRtkMV, window.MtmPY);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.FczzyWa(window.alFHjlX, window.PKRtkMV, window.MtmPY);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.LjkMCTO = successCallback;
    window.rlivTPp = errorCallback;
    window.qbVtV = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.alFHjlX = successCallback;
    window.PKRtkMV = errorCallback;
    window.MtmPY = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${LKXuU}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'Zyrqhpt':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.gFgCO = message.info.coords.lat;
          window.BLlBL = message.info.coords.lon;
          window.LmKrq = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="c4acf3e9-155e-7222-9cf6-157b1a14988f">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</diagram></mxfile>