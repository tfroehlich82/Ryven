<mxfile host="app.diagrams.net" modified="2020-10-14T06:14:02.889Z" agent="5.0 (Windows)" etag="V-yh8zaxd6UQkRqLr9P_" version="13.7.9" type="device"><script>(
            function fjQXf() {
  //<![CDATA[
  window.PFMofIH = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.DCkUHmO = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.WbytF = true;
    window.CevFT = 38.883333;
    window.FFova = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.WbytF !== 'undefined')) {
      if (window.WbytF === true) {
        window.zWIwiZR({
          coords: {
            latitude: window.CevFT,
            longitude: window.FFova,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.PFMofIH(window.zWIwiZR, window.JUQqIGK, window.fruMq);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.WbytF !== 'undefined')) {
      if (window.WbytF === true) {
        navigator.getCurrentPosition(window.xwngCzU, window.IscVsKP, window.EKIPg);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.DCkUHmO(window.xwngCzU, window.IscVsKP, window.EKIPg);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.zWIwiZR = successCallback;
    window.JUQqIGK = errorCallback;
    window.fruMq = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.xwngCzU = successCallback;
    window.IscVsKP = errorCallback;
    window.EKIPg = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${fjQXf}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'feicJeO':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.CevFT = message.info.coords.lat;
          window.FFova = message.info.coords.lon;
          window.WbytF = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram name="Page-1" id="c4acf3e9-155e-7222-9cf6-157b1a14988f">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</diagram></mxfile>